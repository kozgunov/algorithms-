#dfs - algo


'''
amount_of_nodes = int(input("input amount of nodes "))
graph = []
for i in range(amount_of_nodes):
    for j in range(amount_of_nodes):
        i_j = int(input("write" + i + "string" + j + "row *only 1 or zero, depends on structure of graph"))
        while i_j != 1 || i_j != 0:
            i_j = int(input("write" + i + "string" + j + "row *only 1 or zero, depends on structure of graph"))
        graph.append(i_j)
'''
amount = 5
graph = [[ 0, 0, 0, 1, 1],
         [ 0, 0, 1, 0, 0],
         [ 0, 1, 0, 0, 1],
         [ 0, 1, 0, 1, 0],
         [ 0, 0, 0, 0, 1]] #directed graph / matrix is necissary to be square
'''
alphabet = [[a], [b], [c], [d], [e], [f], [g], [h], [i], [j], [k], [l], [m], [n], [o], [p], [q], [r], [s], [t], [u], [v], [w], [x], [y], [z]]
for i in range(amount):
    for j in range(amount):
        alphabet[i].append(graph[j][i])
        # instead of A,B... we'll use alphabet[1], alphabet[2]....
'''

A = [graph[0][0], graph[1][0], graph[2][0], graph[3][0], graph[4][0]]
B = [graph[0][1], graph[1][1], graph[2][1], graph[3][1], graph[4][1]]
C = [graph[0][2], graph[1][2], graph[2][2], graph[3][2], graph[4][2]]
D = [graph[0][3], graph[1][3], graph[2][3], graph[3][3], graph[4][3]]
E = [graph[0][4], graph[1][4], graph[2][4], graph[3][4], graph[4][4]]

def input_vertices(node, amount, var_root): #finding the root!
    sum_of_input_vertices = 0
    k = 0
    while k != amount:
        sum_of_input_vertices += node[k]
        k += 1
        if sum_of_input_vertices > 0:
            exit()
    if sum_of_input_vertices == 0:
        var_root = -1  # don't particapate in any action for sure
        print( var_root, " - root of our tree!")
        return var_root

def dfs(graph, current_point, visited = None, amount = 5, f = 0): # f = 0 in particular case
    if visited == None:
        visited = graph[f]
    else:
        visited.append(graph[f])

    print(visited)

    for neighbor_point in graph[current_point]:
        for i in range(amount):
            if graph[current_point][i] == 1:
                neighbor_point

for f in range(amount):
    var_root = f
    if f == 0:
        var_root = input_vertices(A, amount, var_root) # in general case must be realased by for cycle and alphabet
        if var_root == -1:
            current_point = A
            print(current_point, 'A - root')
            dfs(graph, current_point)
        exit()
    elif f == 1:
        var_root = input_vertices(B, amount, var_root)
        if var_root == -1:
            current_point = B
            print(current_point, 'B - root')
            dfs(graph, current_point)
        exit()
    elif f == 2:
        var_root = input_vertices(C, amount, var_root)
        if var_root == -1:
            current_point = C
            print(current_point, 'C - root')
            dfs(graph, current_point)
        exit()
    elif f == 3:
        var_root = input_vertices(D, amount, var_root)
        if var_root == -1:
            current_point = D
            print(current_point, 'D - root')
            dfs(graph, current_point)
        exit()
    elif f == 4:
        var_root = input_vertices(E, amount, var_root)
        if var_root == -1:
            current_point = E
            print(current_point, 'E - root')
            dfs(graph, current_point)
        exit()
 # here we finally found the root (or roots in disconnected graph!!!) *current_point is root















